load monitor.maude
load patient.maude

fmod CONTROLSYSTEM is

    protecting NAT .
    protecting STRING .
    protecting BOOL .
    protecting MONITOR .
    extending LIST{Monitor} .
    extending PATIENT .

    sorts ControlSystem CSystemID CSystemName .
    subsort Nat < CSystemID .
    subsort String < CSystemName .

    vars LISTMONITORS1 LISTMONITORS2 LISTMONITORSTAIL : List{Monitor} .
    vars LISTSENSORS1 LSTAIL : List{Sensor} .
    var LISTSUPPLYMACHINES1 LISTSUPPLYMACHINESTAIL : List{SupplyMachine} .
    vars MONITOR1 : Monitor .
    var CSYSTEMID1 : CSystemID .
    vars MONITORID1 MONITORID2 : MonitorID .
    var SMACHINEID1 : SMachineID .
    var SENSORID1 : SensorID .
    var CSYSTEMNAME1 : CSystemName .
    var MONITORNAME1 : MonitorName .
    var SENSORNAME1 : SensorName .
    var SMACHINENAME1 : SMachineName .
    var SMHEAD : SupplyMachine .
    var MINB : MinBound .
    var MAXB : MaxBound .
    var MEASUREDVALUE1 : MeasuredValue .
    var STATUS : Status .
    var PATIENT1, PATIENT2 : Patient .
    var CSYSTEM1 : ControlSystem .
    var UNITSSAFE : SuppliedUnitsSafe .
    var UNITSCRITICAL : SuppliedUnitsCritical .
    var UNITS : SuppliedUnits .


    op controlSystem : CSystemID CSystemName Patient List{Monitor} -> ControlSystem .
    op controlSystemError : String -> ControlSystem .

    --- Get report from the Control system
    op checkControlSystem : ControlSystem -> ControlSystem .
    eq checkControlSystem(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1)) = controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, checkMonitors(LISTMONITORS1)) .
    
    op checkMonitors : List{Monitor} -> List{Monitor} .
    eq checkMonitors(nil) = nil .
    eq checkMonitors(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTSUPPLYMACHINES1) LISTMONITORSTAIL) =
    if (areSensorsCritical(LISTSENSORS1))
        then (monitorStatus(MONITORID1, MONITORNAME1, LISTSENSORS1, updateCritical(LISTSUPPLYMACHINES1), critical)) checkMonitors(LISTMONITORSTAIL)
        else (monitorStatus(MONITORID1, MONITORNAME1, LISTSENSORS1, updateSafe(LISTSUPPLYMACHINES1), safe)) checkMonitors(LISTMONITORSTAIL)
    fi .

    op areSensorsCritical : List{Sensor} -> Bool .
    eq areSensorsCritical(nil) = false .
    eq areSensorsCritical(sensor(SENSORID1, SENSORNAME1, MINB, MAXB, MEASUREDVALUE1) LSTAIL) =
    if (MEASUREDVALUE1 > MAXB or MEASUREDVALUE1 < MINB)
        then true
        else areSensorsCritical(LSTAIL)
    fi .

    op updateSafe : List{SupplyMachine} -> List{SupplyMachine} .
    eq updateSafe(nil) = nil .
    eq updateSafe(supplyMachine(SMACHINEID1, SMACHINENAME1, UNITSSAFE, UNITSCRITICAL, UNITS) LISTSUPPLYMACHINESTAIL)
    = (supplyMachine(SMACHINEID1, SMACHINENAME1, UNITSSAFE, UNITSCRITICAL, UNITSSAFE)) updateSafe(LISTSUPPLYMACHINESTAIL).

    op updateCritical : List{SupplyMachine} -> List{SupplyMachine} .
    eq updateCritical(nil) = nil .
    eq updateCritical(supplyMachine(SMACHINEID1, SMACHINENAME1, UNITSSAFE, UNITSCRITICAL, UNITS) LISTSUPPLYMACHINESTAIL)
    = (supplyMachine(SMACHINEID1, SMACHINENAME1, UNITSSAFE, UNITSCRITICAL, UNITSCRITICAL)) updateCritical(LISTSUPPLYMACHINESTAIL).


    --- Get the patient currently using given control system
    op getPatient : ControlSystem -> Patient .
    eq getPatient(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1)) = PATIENT1 .

    --- Assign a new patient to the given control system
    op setPatient : ControlSystem Patient -> ControlSystem .
    eq setPatient(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1), PATIENT2) = controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT2, LISTMONITORS1) .


    --- Operations to manage monitors in control system
    op addMonitor : ControlSystem Monitor -> ControlSystem .
    eq addMonitor(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1), MONITOR1) = controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1 MONITOR1) .

    op getMonitorFromControlSystemByID : ControlSystem MonitorID -> Monitor .
    eq getMonitorFromControlSystemByID(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1), MONITORID1) = getMonitorByID(LISTMONITORS1, MONITORID1) .

    op getMonitorByID : List{Monitor} MonitorID -> Monitor .
    eq getMonitorByID(nil, MONITORID2) = monitorError("Monitor not found") .
    eq getMonitorByID(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTSUPPLYMACHINES1) LISTMONITORSTAIL, MONITORID2) =
    if (MONITORID1 == MONITORID2)
        then monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTSUPPLYMACHINES1)
        else getMonitorByID(LISTMONITORSTAIL, MONITORID2)
    fi .

    op removeMonitorFromControlSystemByID : ControlSystem MonitorID -> ControlSystem .

    eq removeMonitorFromControlSystemByID(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1), MONITORID1) = controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, removeMonitorByID(LISTMONITORS1, MONITORID1)) .

    op removeMonitorByID : List{Monitor} MonitorID -> List{Monitor} .
    eq removeMonitorByID(LISTMONITORS1, MONITORID1) = removeMonitorByID2(LISTMONITORS1, MONITORID1, nil) .

    op removeMonitorByID2 : List{Monitor} MonitorID List{Monitor} -> List{Monitor} .
    eq removeMonitorByID2(nil, MONITORID1, LISTMONITORS1) = LISTMONITORS1 .
    eq removeMonitorByID2(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTSUPPLYMACHINES1) LISTMONITORSTAIL, MONITORID2, LISTMONITORS2) =
    if (MONITORID1 == MONITORID2)
        then LISTMONITORS2 LISTMONITORSTAIL
        else removeMonitorByID2(LISTMONITORSTAIL, MONITORID2, LISTMONITORS2 monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTSUPPLYMACHINES1))
    fi .

    op updateMonitorByID : ControlSystem MonitorID Monitor -> ControlSystem .
    eq updateMonitorByID(CSYSTEM1, MONITORID1, MONITOR1) = addMonitor(removeMonitorFromControlSystemByID(CSYSTEM1, MONITORID1), MONITOR1) .

endfm

view ControlSystem from TRIV to CONTROLSYSTEM is
    sort Elt to ControlSystem .
endv