load control-system.maude

fmod ICU is

    protecting NAT .
    protecting STRING .
    extending LIST{ControlSystem} .

    sorts Icu IcuID IcuName .

    subsort Nat <  IcuID .
    subsort String < IcuName .

    var ICU1 : Icu .
    var ICUID1 : IcuID .
    var ICUNAME1 : IcuName .
    vars LISTCSYSTEMS1 LISTCSYSTEMS2 LISTCSYSTEMSTAIL : List{ControlSystem} .
    var CSYSTEM1 : ControlSystem .
    vars CSYSTEMID1 CSYSTEMID2 : CSystemID .
    var CSYSTEMNAME1 : CSystemName .
    var PATIENT1 : Patient .
    var LISTMONITORS1 : List{Monitor} .
    var MONITORID1 : MonitorID .
    var SENSORID1 : SensorID .
    var SENSOR1 : Sensor .


    op icu : IcuID IcuName List{ControlSystem} -> Icu .

    --- Operations to manage control systems in ICU:
    
    op addControlSystem : Icu ControlSystem -> Icu .
    eq addControlSystem(icu(ICUID1, ICUNAME1, LISTCSYSTEMS1), CSYSTEM1) = icu(ICUID1, ICUNAME1, LISTCSYSTEMS1 CSYSTEM1) .

    op getControlSystemFromICUByID : Icu CSystemID -> ControlSystem .
    eq getControlSystemFromICUByID(icu(ICUID1, ICUNAME1, LISTCSYSTEMS1), CSYSTEMID1) = getControlSystemByID(LISTCSYSTEMS1, CSYSTEMID1) .

    op getControlSystemByID : List{ControlSystem} CSystemID -> ControlSystem .
    eq getControlSystemByID(nil, CSYSTEMID1) = controlSystemError("Control system not found") .
    eq getControlSystemByID(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1) LISTCSYSTEMSTAIL, CSYSTEMID2) =
    if (CSYSTEMID1 == CSYSTEMID2)
        then controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1)
        else getControlSystemByID(LISTCSYSTEMSTAIL, CSYSTEMID2)
    fi .

    op removeControlSystemFromICUByID : Icu CSystemID -> Icu .
    eq removeControlSystemFromICUByID(icu(ICUID1, ICUNAME1, LISTCSYSTEMS1), CSYSTEMID1) = icu(ICUID1, ICUNAME1, removeControlSystemByID(LISTCSYSTEMS1, CSYSTEMID1)) .

    op removeControlSystemByID : List{ControlSystem} CSystemID -> List{ControlSystem} .
    eq removeControlSystemByID(LISTCSYSTEMS1, CSYSTEMID1) = removeControlSystemByID2(LISTCSYSTEMS1, CSYSTEMID1, nil) .

    op removeControlSystemByID2 : List{ControlSystem} CSystemID List{ControlSystem} -> List{ControlSystem} .
    eq removeControlSystemByID2(nil, CSYSTEMID1, LISTCSYSTEMS1) = LISTCSYSTEMS1 .
    eq removeControlSystemByID2(controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1) LISTCSYSTEMSTAIL, CSYSTEMID2, LISTCSYSTEMS2) =
    if (CSYSTEMID1 == CSYSTEMID2)
        then LISTCSYSTEMS2 LISTCSYSTEMSTAIL
        else removeControlSystemByID2(LISTCSYSTEMSTAIL, CSYSTEMID2, LISTCSYSTEMS2 controlSystem(CSYSTEMID1, CSYSTEMNAME1, PATIENT1, LISTMONITORS1))
    fi .

    op updateControlSystemByID : Icu CSystemID ControlSystem -> Icu .
    eq updateControlSystemByID(ICU1, CSYSTEMID1, CSYSTEM1) = addControlSystem(removeControlSystemFromICUByID(ICU1, CSYSTEMID1), CSYSTEM1) .

    op getSensorFromICU : Icu CSystemID MonitorID SensorID Sensor -> Sensor .
    eq getSensorFromICU(ICU1, CSYSTEMID1, MONITORID1, SENSORID1, SENSOR1) = getSensorFromMonitorByID(updateSensorByID(getMonitorFromControlSystemByID(getControlSystemFromICUByID(ICU1, CSYSTEMID1), MONITORID1), SENSORID1, SENSOR1), SENSORID1) .

    op updateSensorInIcu : Icu CSystemID MonitorID SensorID Sensor -> Icu .
    eq updateSensorInIcu(ICU1, CSYSTEMID1, MONITORID1, SENSORID1, SENSOR1) = updateControlSystemByID(ICU1, CSYSTEMID1, updateMonitorByID(getControlSystemFromICUByID(ICU1, CSYSTEMID1), MONITORID1, updateSensorByID(getMonitorFromControlSystemByID(getControlSystemFromICUByID(ICU1, CSYSTEMID1), MONITORID1), SENSORID1, SENSOR1))) .

endfm