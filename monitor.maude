load supply-machine.maude



fmod MONITOR is

    protecting NAT .
    protecting STRING .
    extending LIST{Sensor} .
    extending LIST{SupplyMachine} .
    extending SENSOR .

    sorts Monitor MonitorID MonitorName Status .

    subsort Nat < MonitorID .
    subsort String < MonitorName .

    var MONITORID1 : MonitorID .
    vars SMACHINEID1 SMACHINEID2 : SMachineID .
    vars SENSORID1 SENSORID2 : SensorID .
    var MONITORNAME1 : MonitorName .
    var SENSORNAME1 : SensorName .
    vars LISTSENSORS1 LISTSENSORS2 LISTSENSORSTAIL : List{Sensor} .
    vars LISTMACHINES1 LISTMACHINES2 LISTSMACHINESTAIL : List{SupplyMachine} .
    var MINBOUND1 : MinBound .
    var MAXBOUND1 : MaxBound .
    var MEASUREDVALUE1 : MeasuredValue .
    var SENSOR1 : Sensor .
    var SMACHINENAME1 : SMachineName .
    var SUNITSSAFE1 : SuppliedUnitsSafe .
    var SUNITSCRITICAL1 : SuppliedUnitsCritical .
    var SUNITS1 : SuppliedUnits .
    var SMACHINE1 : SupplyMachine .
    var MONITOR1 : Monitor .

    op safe : -> Status .
    op critical : -> Status .

    op monitor : MonitorID MonitorName List{Sensor} List{SupplyMachine} -> Monitor .
    op monitorStatus : MonitorID MonitorName List{Sensor} List{SupplyMachine} Status -> Monitor .
    op monitorError : String -> Monitor .


    --- Operations to manage sensors in monitors
    op getSensorFromMonitorByID : Monitor SensorID -> Sensor .
    eq getSensorFromMonitorByID(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SENSORID2) = getSensorByID(LISTSENSORS1, SENSORID2) .

    op getSensorByID : List{Sensor} SensorID -> Sensor .
    eq getSensorByID(nil, SENSORID1) = sensorError("Sensor not found") .
    eq getSensorByID(sensor(SENSORID1, SENSORNAME1, MINBOUND1, MAXBOUND1, MEASUREDVALUE1) LISTSENSORSTAIL, SENSORID2) =
    if (SENSORID1 == SENSORID2)
        then sensor(SENSORID1, SENSORNAME1, MINBOUND1, MAXBOUND1, MEASUREDVALUE1)
        else getSensorByID(LISTSENSORSTAIL, SENSORID2)
    fi .

    op addSensor : Monitor Sensor -> Monitor .
    eq addSensor(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SENSOR1) = monitor(MONITORID1, MONITORNAME1, SENSOR1 LISTSENSORS1, LISTMACHINES1) .

    op removeSensorFromMonitorByID : Monitor SensorID -> Monitor .
    eq removeSensorFromMonitorByID(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SENSORID1) = monitor(MONITORID1, MONITORNAME1, removeSensorByID(LISTSENSORS1, SENSORID1), LISTMACHINES1) .

    op removeSensorByID : List{Sensor} SensorID -> List{Sensor} .
    eq removeSensorByID(LISTSENSORS1, SENSORID1) = removeSensorByID2(LISTSENSORS1, SENSORID1, nil) .

    op removeSensorByID2 : List{Sensor} SensorID List{Sensor} -> List{Sensor} .
    eq removeSensorByID2(nil, SENSORID1, LISTSENSORS1) = LISTSENSORS1 .
    eq removeSensorByID2(sensor(SENSORID1, SENSORNAME1, MINBOUND1, MAXBOUND1, MEASUREDVALUE1) LISTSENSORSTAIL, SENSORID2, LISTSENSORS2) =
    if (SENSORID1 == SENSORID2)
        then LISTSENSORS2 LISTSENSORSTAIL
        else removeSensorByID2(LISTSENSORSTAIL, SENSORID2, LISTSENSORS2 sensor(SENSORID1, SENSORNAME1, MINBOUND1, MAXBOUND1, MEASUREDVALUE1))
    fi .

    op updateSensorByID : Monitor SensorID Sensor -> Monitor .
    eq updateSensorByID(MONITOR1, SENSORID1, SENSOR1) = addSensor(removeSensorFromMonitorByID(MONITOR1, SENSORID1), SENSOR1) .


    --- Operations to manage supply machines in monitors
    op addSupplyMachine : Monitor SupplyMachine -> Monitor .
    eq addSupplyMachine(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SMACHINE1) = monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, SMACHINE1 LISTMACHINES1) .

    op getSMachineFromMonitorByID : Monitor SMachineID -> SupplyMachine .
    eq getSMachineFromMonitorByID(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SMACHINEID1) = getSMachineByID(LISTMACHINES1, SMACHINEID1) .

    op getSMachineByID : List{SupplyMachine} SMachineID -> SupplyMachine .
    eq getSMachineByID(nil, SMACHINEID1) = supplyMachineError("Supply machine not found") .
    eq getSMachineByID(supplyMachine(SMACHINEID1, SMACHINENAME1, SUNITSSAFE1, SUNITSCRITICAL1, SUNITS1) LISTSMACHINESTAIL, SMACHINEID2) =
    if (SMACHINEID1 == SMACHINEID2)
        then supplyMachine(SMACHINEID1, SMACHINENAME1, SUNITSSAFE1, SUNITSCRITICAL1, SUNITS1)
        else getSMachineByID(LISTSMACHINESTAIL, SMACHINEID2)
    fi .

    op removeSMachineFromMonitorByID : Monitor SMachineID -> Monitor .
    eq removeSMachineFromMonitorByID(monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, LISTMACHINES1), SMACHINEID1) = monitor(MONITORID1, MONITORNAME1, LISTSENSORS1, removeSMachineByID(LISTMACHINES1, SMACHINEID1)) .

    op removeSMachineByID : List{SupplyMachine} SMachineID -> List{SupplyMachine} .
    eq removeSMachineByID(LISTMACHINES1, SMACHINEID1) = removeSMachineByID2(LISTMACHINES1, SMACHINEID1, nil) .

    op removeSMachineByID2 : List{SupplyMachine} SMachineID List{SupplyMachine} -> List{SupplyMachine} .
    eq removeSMachineByID2(nil, SMACHINEID1, LISTMACHINES1) = LISTMACHINES1 .
    eq removeSMachineByID2(supplyMachine(SMACHINEID1, SMACHINENAME1, SUNITSSAFE1, SUNITSCRITICAL1, SUNITS1) LISTSMACHINESTAIL, SMACHINEID2, LISTMACHINES2) =
    if (SMACHINEID1 == SMACHINEID2)
        then LISTMACHINES2 LISTSMACHINESTAIL
        else removeSMachineByID2(LISTSMACHINESTAIL, SMACHINEID2, LISTMACHINES2 supplyMachine(SMACHINEID1, SMACHINENAME1, SUNITSSAFE1, SUNITSCRITICAL1, SUNITS1))
    fi .

    op updateSupplyMachineByID : Monitor SMachineID SupplyMachine -> Monitor .
    eq updateSupplyMachineByID(MONITOR1, SMACHINEID1, SMACHINE1) = addSupplyMachine(removeSMachineFromMonitorByID(MONITOR1, SMACHINEID1), SMACHINE1) .

endfm


view Monitor from TRIV to MONITOR is
    sort Elt to Monitor .
endv